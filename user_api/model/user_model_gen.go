// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"
	"database/sql"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGozeroStudyUserIdPrefix     = "cache:gozeroStudy:user:id:"
	cacheGozeroStudyUserMobilePrefix = "cache:gozeroStudy:user:mobile:"
	cacheGozeroStudyUserNamePrefix   = "cache:gozeroStudy:user:name:"
)

type (
	userModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *User) error

		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		FindOneByName(ctx context.Context, name sql.NullString) (*User, error)
		Update(ctx context.Context, tx *gorm.DB, data *User) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserModel struct {
		gormc.CachedConn
		table string
	}

	User struct {
		Id       int64          `gorm:"column:id"`
		Name     sql.NullString `gorm:"column:name"`     // The username
		Password string         `gorm:"column:password"` // The user password
		Mobile   string         `gorm:"column:mobile"`   // The mobile phone number
		Type     int64          `gorm:"column:type"`     // The user type, 0:normal,1:vip, for test golang keyword
		CreateAt sql.NullTime   `gorm:"column:create_at"`
		UpdateAt time.Time      `gorm:"column:update_at"`
	}
)

func (User) TableName() string {
	return "`user`"
}

func newUserModel(conn *gorm.DB, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, tx *gorm.DB, data *User) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	gozeroStudyUserIdKey := fmt.Sprintf("%s%v", cacheGozeroStudyUserIdPrefix, id)
	var resp User
	err := m.QueryCtx(ctx, &resp, gozeroStudyUserIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&User{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	gozeroStudyUserMobileKey := fmt.Sprintf("%s%v", cacheGozeroStudyUserMobilePrefix, mobile)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, gozeroStudyUserMobileKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&User{}).Where("`mobile` = ?", mobile).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByName(ctx context.Context, name sql.NullString) (*User, error) {
	gozeroStudyUserNameKey := fmt.Sprintf("%s%v", cacheGozeroStudyUserNamePrefix, name)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, gozeroStudyUserNameKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&User{}).Where("`name` = ?", name).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, tx *gorm.DB, data *User) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserModel) getCacheKeys(data *User) []string {
	if data == nil {
		return []string{}
	}
	gozeroStudyUserIdKey := fmt.Sprintf("%s%v", cacheGozeroStudyUserIdPrefix, data.Id)
	gozeroStudyUserMobileKey := fmt.Sprintf("%s%v", cacheGozeroStudyUserMobilePrefix, data.Mobile)
	gozeroStudyUserNameKey := fmt.Sprintf("%s%v", cacheGozeroStudyUserNamePrefix, data.Name)
	cacheKeys := []string{
		gozeroStudyUserIdKey, gozeroStudyUserMobileKey, gozeroStudyUserNameKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&User{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGozeroStudyUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&User{}).Where("`id` = ?", primary).Take(v).Error
}
